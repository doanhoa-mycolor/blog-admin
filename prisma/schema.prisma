generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  username    String    @unique
  email       String    @unique
  password    String
  name        String
  role        Role      @default(VIEWER)
  enabled     Boolean   @default(true)
  isDeleted   Boolean   @default(false)
  created     DateTime  @default(now())
  updated     DateTime  @updatedAt
  posts       Post[]
  comments    Comment[]
  keyToken    KeyToken?
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String
  slug        String    @unique
  content     String    @db.Text
  excerpt     String?   @db.Text
  status      PostStatus @default(DRAFT)
  publishedAt DateTime?
  authorId    Int
  categoryId  Int?
  created     DateTime  @default(now())
  updated     DateTime  @updatedAt
  author      User      @relation(fields: [authorId], references: [id])
  category    Category? @relation(fields: [categoryId], references: [id])
  comments    Comment[]
  tags        TagsOnPosts[]
  
  @@index([authorId], map: "Post_authorId_fkey")
  @@index([categoryId], map: "Post_categoryId_fkey")
}

model Comment {
  id          Int       @id @default(autoincrement())
  content     String    @db.Text
  status      CommentStatus @default(PENDING)
  authorId    Int?
  postId      Int
  created     DateTime  @default(now())
  updated     DateTime  @updatedAt
  author      User?     @relation(fields: [authorId], references: [id])
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@index([authorId], map: "Comment_authorId_fkey")
  @@index([postId], map: "Comment_postId_fkey")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  slug        String    @unique
  created     DateTime  @default(now())
  updated     DateTime  @updatedAt
  posts       Post[]
}

model Tag {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  slug        String    @unique
  created     DateTime  @default(now())
  updated     DateTime  @updatedAt
  posts       TagsOnPosts[]
}

model TagsOnPosts {
  postId      Int
  tagId       Int
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag         Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
  @@index([tagId], map: "TagsOnPosts_tagId_fkey")
}

model KeyToken {
  id                Int      @id @default(autoincrement())
  userId            Int      @unique
  publicKey         String?  @unique
  privateKey        String?  @unique
  refreshToken      String?  @unique
  refreshTokensUsed Json?
  created           DateTime @default(now())
  updated           DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  EDITOR
  VIEWER
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
} 